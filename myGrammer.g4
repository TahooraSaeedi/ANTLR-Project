grammar         myGrammer;
start:          require* class+;
//------------------------------------------------------------------------------------------------------------------------------------------------------
//استفاده کردن از کتابخانه ها و اجزای آن ها
require:        Name (',' Name)* '=' include (',' include)* Semicolon;
include:        (Require Name) |
                (From Name (Require | '=>') Name);
//------------------------------------------------------------------------------------------------------------------------------------------------------
//تعریف کلاس
class:          Class Name ('(' Name (',' Name)* ')')? (Implements Name (',' Name)*)? Begin classBody End;
classBody:      (var | arr | instantiation | constructor | function)*;
//------------------------------------------------------------------------------------------------------------------------------------------------------
//تعریف متغیر
var:            Accessibility? Const? Type Name ('=' (ternary | expression))? (',' Name ('=' (ternary | expression))?)* Semicolon;
//------------------------------------------------------------------------------------------------------------------------------------------------------
//عملگر سه گانه
ternary:        expression '?' (Name | Int | Float | Double | Char | String | Scientific | Bool) ':'
                (Name | Int | Float | Double | Char | String | Scientific | Bool);
//------------------------------------------------------------------------------------------------------------------------------------------------------
//عبارات
expression:     '(' expression ')' |
                expression '**' expression |
                '~' expression |
                ('++' | '--') expression | expression ('++' | '--') |
                expression ('*' | '/' | '//' | '%') expression |
                expression ('+' | '-') expression |
                expression ('<<' | '>>') expression |
                expression ('&' | '^' | '|') expression |
                expression ('==' | '!=' | '<>') expression |
                expression ('<' | '>' | '<=' | '>=') expression |
                Not expression | expression (And | Or | '||' | '&&') expression |
                data;
data:           ('+' | '-')? (Name | Int | Float | Double | Char | String | Scientific | Bool | element | call);
//------------------------------------------------------------------------------------------------------------------------------------------------------
//تعریف آرایه
arr:            Accessibility? Const? Type Name '[]' ('=' New Type '[' Int ']')? Semicolon |
                Accessibility? Const? Type Name '[]' ('=' ('[]' | '[' ']' | '[' (expression | ternary) (',' (expression | ternary))* ']'))? Semicolon;
element:        Name '[' expression ']';
//------------------------------------------------------------------------------------------------------------------------------------------------------
// نمونه سازی از یک کلاس
instantiation:  Accessibility? Const? Name Name ('=' ((Name '(' ((expression | ternary) (',' (expression | ternary))*)? ')') | Null | Name))? Semicolon;
//------------------------------------------------------------------------------------------------------------------------------------------------------
//تعریف کانستراکتور
constructor:    Name '(' (Type Name (',' Type Name)*)? ')' Begin code End;
//------------------------------------------------------------------------------------------------------------------------------------------------------
//تعریف تابع
function:       (Type | Void) Name '(' (Type Name (',' Type Name)*)? ')' Begin code End;
call:           Name '(' ((expression | ternary) (',' (expression | ternary))*)? ')';
//------------------------------------------------------------------------------------------------------------------------------------------------------
//کدهای داخل بلوک ها
code:           (var | arr | instantiation | assigning | for | while | doWhile | if | switch | try | return | (call Semicolon))*;
//------------------------------------------------------------------------------------------------------------------------------------------------------
//مقدار دهی کردن
assigning:      (Name | element) (',' (Name | element))* ('//=' | '=' | '+=' | '-=' | '/=' | '*=' | '%=')
                (expression | ternary) (',' (expression | ternary))* Semicolon;
//------------------------------------------------------------------------------------------------------------------------------------------------------
//حلقه فور
for:            For '(' (Type? Name '=' (expression | ternary)) Semicolon
                expression Semicolon
                (Name ('++' | '--'))? ')' Begin code End|
                For Name In Name Begin code End;
//------------------------------------------------------------------------------------------------------------------------------------------------------
//حلقه وایل
while:          While '(' expression ')' Begin code End;
//------------------------------------------------------------------------------------------------------------------------------------------------------
//حلقه دو وایل
doWhile:        Do Begin code End While '(' expression ')';
//------------------------------------------------------------------------------------------------------------------------------------------------------
//ایف الس
if:             If '(' expression ')' Begin code End (elseIf)* (else)?;
elseIf:         Else If '(' expression ')' Begin code End;
else:           Else Begin code End;
//------------------------------------------------------------------------------------------------------------------------------------------------------
//سوییچ کیس
switch:         Switch (expression | ternary) Begin case+ default? End;
case:           Case (expression | ternary) ':' code (Break Semicolon)?;
default:        Default ':' code (Break Semicolon)?;
//------------------------------------------------------------------------------------------------------------------------------------------------------
//تعریف خطا
try:            Try Begin code End catchBlock+;
catchBlock:     Catch '(' Name (',' Name)* ')' Begin code End;
//------------------------------------------------------------------------------------------------------------------------------------------------------
//ریترن
return:         Return (expression | ternary) Semicolon;
//------------------------------------------------------------------------------------------------------------------------------------------------------
//فرگمنت ها
fragment Letter:[a-zA-Z];
fragment Digit: [0-9];
fragment Esc:   '\\' [btnr"\\];
//------------------------------------------------------------------------------------------------------------------------------------------------------
//تعریف متغیر
Accessibility:  'public' | 'private';
Type:           'int' | 'float' | 'double' | 'char' | 'string' | 'bool';
//------------------------------------------------------------------------------------------------------------------------------------------------------
//مقدار دهی به متغیرها
Int:            [0] | [1-9] (Digit)*;
Float:          Digit+ '.' Digit+;
Double:         Float;
Char:           '\'' Letter '\'';
String:         '"' (Esc | .)*? '"';
Scientific:     (Digit ('.' Digit+)? 'e' ('-' | '+')? Int);
Bool:           'True' | 'False';
//------------------------------------------------------------------------------------------------------------------------------------------------------
//اسامی خاص
Require:        'require';
From:           'from';
Class:          'class';
Implements:     'implements';
Begin:          'begin';
End:            'end';
Const:          'const';
Not:            'not';
And:            'and';
Or:             'or';
New:            'new';
Null:           'null';
Void:           'void';
For:            'for';
In:             'in';
While:          'while';
Do:             'do';
If:             'if';
Else:           'else';
Switch:         'switch';
Case:           'case';
Break:          'break';
Default:        'default';
Try:            'try';
Catch:          'catch';
Return:         'return';
//------------------------------------------------------------------------------------------------------------------------------------------------------
//نامگذاری متغیرها
Name:           (Letter | '$') (Letter | '$') (Character)*;
Character:      Letter | Digit | '_' | '$';
//------------------------------------------------------------------------------------------------------------------------------------------------------
//سمی کالن
Semicolon:       ';';
//حذف کامنت ها و فضاهای خالی
//------------------------------------------------------------------------------------------------------------------------------------------------------
WhiteSpace:     ('\t' | '\r' | '\n' | ' ' )* -> skip;
CommentSL:      '#-' .*? '-#' -> skip;
CommentML:      '#' ~[\r\n]* -> skip;